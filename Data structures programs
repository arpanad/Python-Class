LIST:
-----
#Create an empty list 2 ways

list1 = []
list2 = list()

print(list1)
print(type(list1))
print(list2)
print(type(list2))

#Concatenate with [5,6,7,8]

list1 = list1 + [5,6,7,8]
print(list1)

#add 8,9,1,5,6,7,8,1 elements to that list

list1.extend([8,9,1,5,6,7,8,1])
print(list1)

#Find frequency of 8 (count)
print(list1.count(8))

#find the mean of the list
mean = sum(list1)/len(list1)
print(mean)

#find sum (List) + min + Max
print(sum(list1) + min(list1) + max(list1))

#Find median of the list
print(list1[int(len(list1)/2)])

#remove duplicates from list and give output in the format of tuple
print(tuple(set(list1)))


Output:
[]
<class 'list'>
[]
<class 'list'>
[5, 6, 7, 8]
[5, 6, 7, 8, 8, 9, 1, 5, 6, 7, 8, 1]
3
5.916666666666667
81
1
(1, 5, 6, 7, 8, 9)



TUPLE:
------
#Create two tuples (1,4,5,6,7,8) (5,6,7,8,9)
tup1 = (1,4,5,6,7,8)
tup2 = (5,6,7,8,9)

#Find the common elements between two tuples
print("Common elemenets: ", tuple(set(tup1).intersection(set(tup2))))


#Concatenate both tuples and remove duplicates from tuple
print("Concatenation: ", tup1+tup2)
print("Duplicates removal: ", set(tup1+tup2))

#Find the index value of 9 (after concatenation)
print("Index value of 9 post concatenation: ", (tup1+tup2)[9])

#multiply above elements 3 times
list1 = list(tup1 + tup2)
for x in range(len(list1)):
    list1[x] = 3*list1[x]

print("Multiply by 3: ", tuple(list1))


Output:
Common elemenets:  (8, 5, 6, 7)
Concatenation:  (1, 4, 5, 6, 7, 8, 5, 6, 7, 8, 9)
Duplicates removal:  {1, 4, 5, 6, 7, 8, 9}
Index value of 9 post concatenation:  8
Multiply by 3:  (3, 12, 15, 18, 21, 24, 15, 18, 21, 24, 27)



SET:
----
#Create two empty sets
set1 = set()
print(type(set1))
set2 = set()
print(type(set2))

#update set1 with 7,8,9,1,2,3,4,5,0
set1.update({7,8,9,1,2,3,4,5,0})

#update set2 with 4,5,6,0
set2.update({4,5,6,0})

#check whether set2 is subset of set1 or no ?
print(set2.issubset(set1))

#check whether both have common elements are no ?
print(set1.intersection(set2))

#remove 8 from set 1 and set 2 ==> find the inferences
set1.remove(8)
print("After removing elemenet 8 from set1:", set1)
#set2.remove(8) -> cant be used as it throws an error when the element is not present
set2.discard(8)
print("After removing elemenet 8 from set2:", set2)

#discard 0 from set1 and set2
set1.discard(0)
print("After removing elemenet 0 from set1 :", set1)

set2.discard(0)
print("After removing elemenet 0 from set2 :", set2)

#find collection of both sets ===> set1 and set2
print("Collection of both sets: ", set1.union(set2))


Output:
<class 'set'>
<class 'set'>
False
{0, 4, 5}
After removing elemenet 8 from set1: {0, 1, 2, 3, 4, 5, 7, 9}
After removing elemenet 8 from set2: {0, 4, 5, 6}
After removing elemenet 0 from set1 : {1, 2, 3, 4, 5, 7, 9}
After removing elemenet 0 from set2 : {4, 5, 6}
Collection of both sets:  {1, 2, 3, 4, 5, 6, 7, 9}



DICTIONARY:
-----------
#create a dictionary
#{1:["english","maths","science"], 2:[10,20,30], 3:["bio-botany","bio-zoology","Algebra"]}
dict1 = {1:["english","maths","science"], 2:[10,20,30], 3:["bio-botany","bio-zoology","Algebra"]}

#Extract "bobtn" from above dictionary
print(dict1[3][0][::2])

#Extract "arbeg" from above dictionary
print(dict1[3][-1][-1:1:-1])

#print all keys in dictionary and convert it into tuple
print(dict1.keys())
print(tuple(dict1.keys()))

#Find the average of all numbers available under key "2"
print("Average : ", sum(dict1[2])/len(dict1[2]))


Output:
bobtn
arbeg
dict_keys([1, 2, 3])
(1, 2, 3)
Average :  20.0



NESTED DATA STRUCTURES:
-----------------------

Task 1:

#Extract the below elements from the given data structure
#Li1 = [2,3,4,5,[45,56,67,78,[111,222,333,[5555,3333,[10000,50000,"python","computer"],1111,7777,8888],444,555,666,777],89,23,34]]
#5  56  222  50000  put  5555  7777  666  89  on  333  3333

Li1 = [2,3,4,5,[45,56,67,78,[111,222,333,[5555,3333,[10000,50000,"python","computer"],1111,7777,8888],444,555,666,777],89,23,34]]
print(Li1[3])
print(Li1[4][1])
print(Li1[4][4][1])
print(Li1[4][4][3][2][1])
print(Li1[4][4][3][2][-1][3:6])
print(Li1[4][4][3][0])
print(Li1[4][4][3][-2])
print(Li1[4][-4][-2])
print(Li1[-1][-3])
print(Li1[4][4][3][2][2][-2:])
print(Li1[4][4][2])
print(Li1[4][4][3][1])


Output:
5
56
222
50000
put
5555
7777
666
89
on
333
3333


Task 2:

a = [1,2,3,4,[100,101,102,"Computer_science"],200,203]

#Extract
#science
#Computer

print(a[4][-1][9:])
print(a[4][-1][:8])

Output:
science
Computer

